Description: This test case was first, and fundamental in verifying that our malloc function not only allocated space correctly as requested by the user, but was also able to correctly store and print the variables, as would be required of the standard malloc function. The fact that each instance of these variables is able to correctly print each character that it was assigned, then free those variables, and repeat this process 100 times, demonstrates that our implementation of malloc is accurate. This test case has an average runtime of 0.000018 seconds. 

void testCaseE(){
	struct timeval tval_before, tval_after, tval_result;
	gettimeofday(&tval_before, NULL);
	int n;
	char *a; char *b; char *c; char *d; char *e; char *f; char *g; char *h; char *i; char *j; char *k; char *l; char *m;
	
	for(n = 0; n<100; n++){
		a = (char *)malloc(sizeof(char)); *a = '0';
		b = (char *)malloc(sizeof(char)); *b = '1';
		c = (char *)malloc(sizeof(char)); *c = '2';
		d = (char *)malloc(sizeof(char)); *d = '3';
		e = (char *)malloc(sizeof(char)); *e = '4';
		f = (char *)malloc(sizeof(char)); *f = '5';
		g = (char *)malloc(sizeof(char)); *g = '6';
		h = (char *)malloc(sizeof(char)); *h = '7';
		i = (char *)malloc(sizeof(char)); *i = '8';
		j = (char *)malloc(sizeof(char)); *j = '9';
		k = (char *)malloc(sizeof(char)); *k = 'a';
		l = (char *)malloc(sizeof(char)); *l = 'b';
		m = (char *)malloc(sizeof(char)); *m = 'c';
			
		printf("CHARACTERS [ALLOCATED]: | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c |\n", *a,*b,*c,*d,*e,*f,*g,*h,*i,*j,*k,*l,*m);
			
		free(a);
		free(b);
		free(c);
		free(d);
		free(e);
		free(f);
		free(g);
		free(h);
		free(i);
		free(j);
		free(k);
		free(l);
		free(m);
			
		printf("CHARACTERS [FREED]: | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c | %c |\n", *a,*b,*c,*d,*e,*f,*g,*h,*i,*j,*k,*l,*m);
	}

	gettimeofday(&tval_after, NULL);
	timersub(&tval_after, &tval_before, &tval_result);
	printf("Time elapsed for Workload E: %ld.%06ld\n", (long int)tval_result.tv_sec, (long int)tval_result.tv_usec);
	printf("Average for Workload E: %f\n", ((double)((tval_result.tv_usec)*(.000001))+(double)tval_result.tv_sec)/100);	
}

Decription: This testcase mallocs both chars and int's.  Preivously the testcases only used chars, but we decided to give our program a wider range of values to see how it handles it.  Alternating between char and int, we immediately free each one and see how the program responds.  This test case has an average runtime of 0.000091 seconds.
void testCaseF(){
		
	int k, l;
	struct timeval tval_before, tval_after, tval_result;
	gettimeofday(&tval_before, NULL);
	for(k = 0; k < 100 ; k++){
		for (l = 0; l <30; l++) {
			char * f = (char *)malloc(sizeof(char)); *f = '6';
			int * g = (int *)malloc(sizeof(int)); *g = 6;
			free(f);
			free(g);
		}
			
	}
	gettimeofday(&tval_after, NULL);
	timersub(&tval_after, &tval_before, &tval_result);
	printf("Time elapsed for Workload F: %ld.%06ld\n", (long int)tval_result.tv_sec, (long int)tval_result.tv_usec);
	printf("Average for Workload F: %f\n", ((double)((tval_result.tv_usec)*(.000001))+(double)tval_result.tv_sec)/100);	
	
}